//---------------------------------------------------------------------------------
// T1L1_Falling.Scr
//
// Pocket Flash routines:
//				gags/T1L1_Falling.Scr::DoPocketFlashes
//				gags/T1L1_Falling.Scr::StopPocketFlashes
//
// To make a parachutist fall:
//				"thread gags/T1L1_Falling.Scr::parachute_guy_near $bob 10 -300 -200"
//				"thread gags/T1L1_Falling.Scr::parachute_guy_mid $bob2 10 -300 -200"
//				"thread gags/T1L1_Falling.Scr::parachute_guy_far $bob3 10 -300 -200"
//
//	Fall without a parachute:
//				thread gags/T1L1_Falling.Scr::noparachute_guy $noparachute_guy_start $noparachute_guy_dest
//
//	To turn on the AA guns:
//				thread gags/T1L1_Falling.Scr::TurnOnAAGuns
//
//	To turn off the AA guns:
//				thread gags/T1L1_Falling.Scr::TurnOffAAGuns
//				
//---------------------------------------------------------------------------------

//---------------------------------------------------------------------------------
PlayerFall:
//---------------------------------------------------------------------------------

/// 	thread DisplayYawPitch

	// hide some stuff that is not very visible from up high
	$truck_1 hide
	$windmillguy hide
	$pickup_delete hide
	$stuka_1 hide
	$stuka_2 hide
	$stuka_3 hide
	$stuka_4 hide
	$creek hide

	// Set the fogging parameters.
	level.farplane_normal_distance = 2000
	level.player_start_height = 5300
	level.player_end_height = -6450
	level.terrain_visible_height = 1500

	$world farclipoverride 16000

	level.floor = level.player_end_height + 100
	//level.floor = -50

	// setup the tank runner to run
	$runner thread gags/t1l1_misc.scr::tankrunner_run 15

	// setup the tank to go...
	thread gags/t1l1_misc.scr::tigertank

	thread RestrictView

	$player glue $playerspot_plane 0
	$player solid

	thread PlayerParachute

	// Run the gag in threads for convenience.
	thread change_fog
	thread change_lod

	$playerspot_plane time 30		// Amount of time in seconds to complete the fall.
	$playerspot_plane moveto $hitme
	$playerspot_plane move

	wait 29.5

	level.player_chute hide

	$world farclipoverride 2800

	// get rid of the camera restriction..
	waitthread UnrestrictView
	// don't let them move the camera at all
	FreezePlayer
	// force them to look down..
	thread gags/t1l1_falling.scr::PlayerFaceYawPitch 67 NIL 20 20
	thread doEQ

// FIXME: DISABLED
//	waitthread JiggleCamera 1.0	
//	thread ClampYaw 29

	wait 0.5
	ReleasePlayer

	// swap our barn parachute in for the our in-air parachute... 
	// (while they're not looking...)
	level.player_chute hide
	$barn_parachute show

	$player unglue

	// Now use Tom's fogging value.
	//println ("Using preset fog value")
	$world farplane 6000

	// show some stuff that was previously hidden
	$truck_1 show
	$windmillguy show
	$pickup_delete show
	$stuka_1 show
	$stuka_2 show
	$stuka_3 show
	$creek show

	thread maps/t1l1.scr::InBarn

	// get rid of the guys on the tiger tank...
	
	End

//---------------------------------------------------------------------------------
change_fog:
//
// Thread monitors the player's position and alters the fog accordingly.
// The intention is to make it look like the player is falling into the foggy
// ground, as opposed to making it look like the player is falling through
// uniform fog.
//
//---------------------------------------------------------------------------------

	println ("starting fogging changes")

	while ($playerspot_plane.origin[2] > level.player_end_height)
	{
		// Get the player height from the ground.
		local.player_height_from_ground = $playerspot_plane.origin[2] - level.player_end_height
		if (local.player_height_from_ground < 0)
		{
			local.player_height_from_ground = 0
		}

		// The maximum view distance is the height x sq root of 2, which is the hypotenuse of the triangle.
		local.farplane_distance = (local.player_height_from_ground * 1.42) + level.farplane_normal_distance
		$world farplane local.farplane_distance

		waitframe
	}

	println ("fogging normal")

end

//---------------------------------------------------------------------------------
change_lod:
//
// Put changes to the LOD of the world here.
//
//---------------------------------------------------------------------------------

	println ("starting lod changes")

	local.terrain_on = 0
	$world render_terrain "0"

/*	while ($playerspot_plane.origin[2] > level.player_end_height)
	{
		// Get the player height from the ground.
		local.player_height_from_ground = $playerspot_plane.origin[2] - level.player_end_height
		if (local.player_height_from_ground < 0)
		{
			local.player_height_from_ground = 0
		}

		// Turn the terrain on at the right height.
		if (local.terrain_on == 0 && local.player_height_from_ground < level.terrain_visible_height)
		{
			local.terrain_on = 1
			$world render_terrain "1"

			// Switch off the low poly terrain here?
		}

		waitframe
	}

	println ("lod normal")
*/
end

//---------------------------------------------------------------------------------
DoPocketFlashes:
//
//	Start up all the pocket flashes that are in the level...
//
//	set the following as your trigger's setthread:
//				gags/T1L1_Falling.Scr::DoPocketFlashes
//
//	Note: Name all your pocket flashes: pocketflash
//
//---------------------------------------------------------------------------------

	level.pocketFlashMinTime = 3
	level.pocketFlashMaxTime = 8

	for (local.i=1;local.i<=$pocketflash.size;local.i++)
	{
		$pocketflash[local.i] thread DoPocketFlash
	}


	End

//---------------------------------------------------------------------------------
StopPocketFlashes:
//
//	Call this to stop/delete all pocket flashes...
//
//---------------------------------------------------------------------------------

	for (local.i=$pocketflash.size;local.i>0;local.i--)
	{
		$pocketflash[local.i].flashthread delete
		$pocketflash[local.i] delete
	}


	End

//---------------------------------------------------------------------------------
DoPocketFlash:
//---------------------------------------------------------------------------------

	self.flashthread = local

	while ( 1 )	// this will get killed in StopPocketFlashes
	{
		local.temp	 = (level.pocketFlashMaxTime - level.pocketFlashMinTime)

		local.random = randomfloat local.temp
		local.random += level.pocketFlashMinTime

		wait local.random

		self anim start
		wait 1
	}

	End

	parachute_guy_near local.trackobject local.falltime local.delta_x local.delta_y local.guyscale:

	// Open the guy's chute.
	local.chute = spawn static/parachute_actors "classname" "scriptmodel" "origin" local.trackobject.origin "angles" local.trackobject.angles
	local.guy = spawn human/allied_airborne_soldier "origin" local.trackobject.origin "scale" local.guyscale
	local.chute attach local.guy "Bip01 Spine2" 0 (0 0 0)

	// Make the guy into a dummy.
	local.guy exec global/disable_ai.scr
	local.guy.weapon = "none"
	local.guy physics_off
	local.guy nodamage
	local.guy glue local.trackobject 1

	// Calculate the target position.
	local.x = local.guy.origin[0] + local.delta_x
	local.y = local.guy.origin[1] + local.delta_y
	local.z = -6400
	local.target = (local.x local.y local.z)

	// Start the movement.
	local.trackobject time local.falltime
	local.trackobject moveto local.target
	local.trackobject move

	// Move and animate.
	local.distance_from_target = 1000
	while (local.distance_from_target > 50)
	{
		local.r = randomint (100)

		// 50% chance of idling.
		if (local.r < 50)
		{
			local.guy anim 11A901_ParaIdleB
		}
		else if (local.r < 67)
		{
			local.guy anim 11A903_ParaLookLR
		}
		else if (local.r < 83)
		{
			local.guy anim 11A902_ParaLookUp
		}
		else
		{
			local.guy anim 11A904_ParaLookDown
		}
		local.guy waittill animdone

		// Determine if the next frame should be done.
		local.distance_from_target = local.guy.origin[2] - local.target[2]
	}

	// Remove this from the entity count.
	local.guy delete

end

parachute_guy_mid local.trackobject local.falltime local.delta_x local.delta_y local.guyscale:

	// Open the guy's chute.
	local.chute = spawn static/parachute_actors "classname" "scriptmodel" "origin" local.trackobject.origin
	local.guy = spawn human/allied_airborne_soldier "origin" local.trackobject.origin "scale" local.guyscale
	local.chute attach local.guy "Bip01 Spine2" 0 (0 0 0)

	// Make the guy into a dummy.
	local.guy exec global/disable_ai.scr
	local.guy.weapon = "none"
	local.guy physics_off
	local.guy nodamage
	local.guy glue local.trackobject 1

	// Calculate the target position.
	local.x = local.guy.origin[0] + local.delta_x
	local.y = local.guy.origin[1] + local.delta_y
	local.z = -6400
	local.target = (local.x local.y local.z)

	// Start the movement.
	local.trackobject time local.falltime
	local.trackobject moveto local.target
	local.trackobject move

	// Move and animate.
	local.distance_from_target = 1000
	while (local.distance_from_target > 50)
	{
		local.guy anim 11A900_ParaIdle
		local.guy waittill animdone

		// Determine if the next frame should be done.
		local.distance_from_target = local.guy.origin[2] - local.target[2]
	}

	// Remove this from the entity count.
	local.guy delete

end

parachute_guy_far local.trackobject local.falltime local.delta_x local.delta_y local.guyscale:

	// Open the guy's chute.
	local.chute = spawn static/parachute_actors "classname" "scriptmodel" "origin" local.trackobject.origin
	local.guy = spawn human/allied_airborne_soldier "origin" local.trackobject.origin "scale" local.guyscale
	local.chute attach local.guy "Bip01 Spine2" 0 (0 0 0)

	// Make the guy into a dummy.
	local.guy exec global/disable_ai.scr
	local.guy.weapon = "none"
	local.guy physics_off
	local.guy nodamage
	local.guy glue local.trackobject 1

	// Calculate the target position.
	local.x = local.guy.origin[0] + local.delta_x
	local.y = local.guy.origin[1] + local.delta_y
	local.z = -6400
	local.target = (local.x local.y local.z)

	// Start the movement.
	local.trackobject time local.falltime
	local.trackobject moveto local.target
	local.trackobject move

	// Move and animate.
	wait local.falltime

	// Remove this from the entity count.
	local.guy delete

end

//---------------------------------------------------------------------------------
Showpos:
//---------------------------------------------------------------------------------

	while (self)
	{
		dprintln "I'm at" self.origin[0] " " self.origin[1] " " self.origin[2]
		dprintln "Player's at" $player.origin[0] " " $player.origin[1] " " $player.origin[2]

		wait 0.5
	}

	end

//---------------------------------------------------------------------------------
noparachute_guy local.trackobject local.movetoobject:
//	
//	Oops, where'd my parachute go?
//
//---------------------------------------------------------------------------------

	local.falltime	= 11.5
	local.waittime	= 3

	wait local.waittime


	local.guy = spawn human/allied_airborne_soldier "origin" local.trackobject.origin

	if ( local.guy==NIL || local.guy==NULL || local.trackobject==NIL )
	{
		dprintln "error spawning guy falling!
		end
	}

	// Make the guy into a dummy.
	local.guy exec global/disable_ai.scr
	local.guy.weapon = "none"
	local.guy physics_off
	local.guy nodamage
	local.guy glue local.trackobject 1

	// Start the movement.
	local.trackobject time local.falltime
	local.trackobject moveto local.movetoobject
	local.trackobject move

	// Move and animate.
	// loop 
	local.guy thread global/LoopAnim.Scr::LoopAnim 11A907_ParaFall

	local.guy thread DoYell

	// Move and animate.
	wait local.falltime

	// kill the anim thread
	local.guy thread global/LoopAnim.Scr::LoopAnimStop

	// Remove this from the entity count.
	local.guy delete

	End

//--------------------------------------------------------------
DoYell:
//--------------------------------------------------------------

////	wait 6
	// jsl--> play the sound from the player so we can actually hear it!
//	self playsound dfr_death_AS2871
	$player playsound dfr_death_AS2871

	end

//--------------------------------------------------------------
TurnOnAAGuns:
//--------------------------------------------------------------
	for (local.i=1;local.i<=$aa_guns.size;local.i++)
	{
		$aa_guns[local.i] thread AAGunTurnOn
	}

	end

//--------------------------------------------------------------
AAGunTurnOn:
//--------------------------------------------------------------
	self Accuracy 40
	self FakeBullets 1
	
	local.random = 0.5 + ( randomfloat 2 )
	wait local.random
	self TurnOn

	End

//--------------------------------------------------------------
TurnOffAAGuns:
//--------------------------------------------------------------
	for (local.i=1;local.i<=$aa_guns.size;local.i++)
	{
		$aa_guns[local.i] TurnOff
//		$aa_guns[local.i] delete
	}
	end

//--------------------------------------------------------------
ShowAngles:
//--------------------------------------------------------------

	while ( 1 )
	{
		dprintln self.targetname " angles=" self.angles[0] " " self.angles[1] " " self.angles[2]
		wait 0.2
	}
	end

//--------------------------------------------------------------
PlayerParachute:
//
//
//	Add two script origins:
//		player_parachute_spot
//		hitme_parachute
//--------------------------------------------------------------
	level.player_chute = spawn static/parachute "classname" "scriptmodel" "origin" $player.origin
	level.player_chute notsolid
	level.player_chute hide

	spawn script_origin targetname "player_parachute_spot"
	spawn script_origin targetname "hitme_parachute"

	$playerspot_plane notsolid
	$player_parachute_spot notsolid

	local.temp = $playerspot_plane.origin
	local.temp[2]	+= 5

	local.temp2 = $hitme.origin
	local.temp2[2]	+= 5
	
	$player_parachute_spot origin local.temp
	$hitme_parachute origin local.temp2

	$player_parachute_spot angles "0 90 0"

	level.player_chute glue $player_parachute_spot
	$player_parachute_spot time 30		// Amount of time in seconds to complete the fall.
	$player_parachute_spot moveto $hitme_parachute
	$player_parachute_spot move

	wait 31

	level.player_chute delete
	$hitme_parachute delete
	$player_parachute_spot delete

	End

//--------------------------------------------------------------
	// FIXME: DISABLED
JiggleCamera local.time:
//--------------------------------------------------------------
	local.jiggletime = level.time + local.time
	
	local.angles = $player.angles
	
	local.pitch = 0
	local.yaw = 0
	local.dir = 0
	local.animspeed = 1.5

	while (local.jiggletime > level.time)
	{
		
		if (local.dir == 1)
		{
			local.pitch +=local.animspeed
			if (local.pitch > 45)
				local.dir = 0
		}
		else
		{
			local.pitch -=local.animspeed
			if (local.pitch < 0) 
				local.dir = 1
		}
				
		local.yaw = local.yaw + ( local.animspeed * 4)
		
		$player.viewangles = (local.pitch local.yaw 0)
		
		waitframe
	}

	$player.viewangles = local.angles
/*
	local.jiggletime = level.time + 1

	while (local.jiggletime > level.time)
	{
		
		if (local.dir == 1)
		{
			local.pitch +=local.animspeed
			if (local.pitch > 45)
				local.dir = 0
		}
		else
		{
			local.pitch -=local.animspeed
			if (local.pitch < 0) 
				local.dir = 1
		}

		local.yaw = local.yaw + ( local.animspeed)

		if ( (( local.pitch + 5.0 ) > local.angles[0]) || (( local.pitch - 5.0 ) < local.angles[0] ) || (local.pitch == local.angles[0]))
			local.pitch = local.angles[0]
		
		if ( (( local.yaw + 15.0 ) > local.angles[1]) || (( local.yaw - 15.0 ) < local.angles[1] ) || (local.yaw == local.angles[1]))
			local.yaw = local.angles[1]
				
		$player.viewangles = (local.pitch local.yaw 0)
		
		waitframe
	}
	
	$player.viewangles = local.angles
*/
	
end
//--------------------------------------------------------------
// FIXME: DISABLED
ClampYaw local.amount:
//--------------------------------------------------------------
	
	local.clamptime = level.time + local.amount
	local.angles = $player.angles
	local.yaw = $player.angles[1]
	local.oldyaw = local.yaw
	while (local.clamptime > level.time)
	{
		local.y = $player.angles[1]
		local.pitch = $player.angles[0]
				
		local.yaw = local.y

		$player.viewangles = (local.pitch local.yaw 0)

		local.oldyaw = local.yaw
		
		waitframe
	}

	$player.viewangles = local.angles

end

//--------------------------------------------------------------
DisplayYawPitch:
//--------------------------------------------------------------

	while (1)
	{
		dprintln "Yaw=" $player.viewangles[0] " Pitch=" $player.viewangles[1]
		wait 0.2
	}

	end

//--------------------------------------------------------------
PlayerFaceYawPitch local.yaw_dest local.pitch_dest local.yaw_speed local.pitch_speed:
//
//	Forces the player's head to turn to the passed yaw and pitch
//--------------------------------------------------------------


	local.yaw = $player.viewangles[0]
	local.pitch = $player.viewangles[1]

	if ( local.yaw_dest==NIL )
		local.yaw_dest = local.yaw

	if ( local.pitch_dest==NIL )
		local.pitch_dest = local.pitch

	if ( local.yaw_speed==NIL )
		local.yaw_speed = 10
	
	if ( local.pitch_speed==NIL )
		local.pitch_speed = 10
	

	if ( local.yaw < local.yaw_dest )
		local.yaw_offset = local.yaw_speed
	else
		local.yaw_offset = 0 - local.yaw_speed

	if ( local.pitch < local.pitch_dest )
		local.pitch_offset = local.pitch_speed
	else
		local.pitch_offset = 0 - local.pitch_speed

	local.yDone = 0
	local.pDone = 0

	while ( local.yDone==0 || local.pDone==0 )
	{
		local.yaw = local.yaw + local.yaw_offset
		local.pitch = local.pitch + local.pitch_offset

		if ( local.yaw_offset > 0 )
		{
			if ( local.yaw >= local.yaw_dest )
			{
				local.yDone = 1
				local.yaw	= local.yaw_dest
			}
		}
		else
		{
			if ( local.yaw <= local.yaw_dest )
			{
				local.yDone = 1
				local.yaw	= local.yaw_dest
			}
		}

		if ( local.pitch_offset > 0 )
		{
			if ( local.pitch >= local.pitch_dest )
			{
				local.pDone = 1
				local.pitch = local.pitch_dest
			}
		}
		else
		{
			if ( local.pitch <= local.pitch_dest )
			{
				local.pDone = 1
				local.pitch = local.pitch_dest
			}
		}

		$player.viewangles = ( local.yaw local.pitch $player.viewangles[2] )

		waitframe
	}

	end

//--------------------------------------------------------------
doEQ:
//--------------------------------------------------------------
//	wait 0.2
	exec global/earthquake.scr .35 10 0 0
	exec global/earthquake.scr .23 6 0 0
	exec global/earthquake.scr 1 1 0 0
	exec global/earthquake.scr 1.25 .3 0 1

	end
//--------------------------------------------------------------
RestrictView:
//
//	Make sure player can't look behind him...
//--------------------------------------------------------------

	// don't let player mess with the mouse while we do this...
	freezeplayer

	// make sure they're looking where we want..
//	waitthread PlayerFaceYawPitch 35 -30
	waitthread PlayerFaceYawPitch 35 -73
	thread doEQ
	wait 1.1
	releaseplayer

	level.turret = spawn models/statweapons/camera_restrict.tik
	level.turret.origin = $player.origin

	level.turret notsolid
	level.turret.angles = "90 0 0"
	level.turret hide
	level.turret turnspeed 1000
	level.turret startyaw -90	// turn us a bit...
	level.turret maxyawoffset 50
	level.turret pitchcaps "-80 50 0"

	level.turret viewjitter .5
	level.turret name ""
	level.turret pickupsound ""

	level.turret setPlayerUsable 1
	level.turret maxuseangle 180	// make sure the doUse command works!
	level.turret doUse $player
	level.turret setPlayerUsable 0

	level.turret glue $playerspot_plane

	thread RockTurretSequence

	level.player_chute show

	end

//--------------------------------------------------------------
UnrestrictView:
//	allow player to look normally when they detach from the
//	parachute...
//--------------------------------------------------------------

	level.turret setPlayerUsable 1
	level.turret doUse $player
	level.turret setPlayerUsable 0
	level.turret delete
	level.turret = NULL


	end

//--------------------------------------------------------------
RockTurretSequence:
//	rock the turret using this script
//--------------------------------------------------------------

	//                     +-------------- duration of constant jitter
	//                     |
	//                     |   +---------- minimum magnitude of jitter
	//                     |   |
	//                     |   |   +------ maximum magnitude of jitter
	//                     |   |   |					
	//                     V   V   V
	//dprintln "starting light shake"
	waitthread RockTurret 22.0 0.75 1.0
	//dprintln "switching to heavy shake"
	waitthread RockTurret 15.0 3.0 5.0

	end


//--------------------------------------------------------------
RockTurret local.duration local.lomag local.himag:
//	single turret rock
//--------------------------------------------------------------

	local.expire = level.time + local.duration

	while ( (level.time < local.expire) && level.turret )
	{
		local.mag = local.lomag + (randomfloat(1.0) * (local.himag - local.lomag))
		level.turret dojitter local.mag
		wait 0.15
	}

	end